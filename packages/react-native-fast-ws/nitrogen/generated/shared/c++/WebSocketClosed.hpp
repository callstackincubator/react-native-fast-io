///
/// WebSocketClosed.hpp
/// Fri Nov 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::grabbou {

  /**
   * A struct which can be represented as a JavaScript object (WebSocketClosed).
   */
  struct WebSocketClosed {
  public:
    double code     SWIFT_PRIVATE;
    std::string reason     SWIFT_PRIVATE;

  public:
    explicit WebSocketClosed(double code, std::string reason): code(code), reason(reason) {}
  };

} // namespace margelo::nitro::grabbou

namespace margelo::nitro {

  using namespace margelo::nitro::grabbou;

  // C++ WebSocketClosed <> JS WebSocketClosed (object)
  template <>
  struct JSIConverter<WebSocketClosed> {
    static inline WebSocketClosed fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return WebSocketClosed(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "code")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "reason"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const WebSocketClosed& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "code", JSIConverter<double>::toJSI(runtime, arg.code));
      obj.setProperty(runtime, "reason", JSIConverter<std::string>::toJSI(runtime, arg.reason));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "code"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "reason"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
