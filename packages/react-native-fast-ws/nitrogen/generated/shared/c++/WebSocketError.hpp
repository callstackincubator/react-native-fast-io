///
/// WebSocketError.hpp
/// Fri Nov 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::grabbou {

  /**
   * A struct which can be represented as a JavaScript object (WebSocketError).
   */
  struct WebSocketError {
  public:
    std::string message     SWIFT_PRIVATE;

  public:
    explicit WebSocketError(std::string message): message(message) {}
  };

} // namespace margelo::nitro::grabbou

namespace margelo::nitro {

  using namespace margelo::nitro::grabbou;

  // C++ WebSocketError <> JS WebSocketError (object)
  template <>
  struct JSIConverter<WebSocketError> {
    static inline WebSocketError fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return WebSocketError(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "message"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const WebSocketError& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "message", JSIConverter<std::string>::toJSI(runtime, arg.message));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "message"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
