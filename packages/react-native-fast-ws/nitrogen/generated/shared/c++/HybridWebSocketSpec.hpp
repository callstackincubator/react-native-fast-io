///
/// HybridWebSocketSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <string>
#include <NitroModules/ArrayBuffer.hpp>
#include <functional>

namespace margelo::nitro::websocket {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `WebSocket`
   * Inherit this class to create instances of `HybridWebSocketSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridWebSocket: public HybridWebSocketSpec {
   * public:
   *   HybridWebSocket(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridWebSocketSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridWebSocketSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridWebSocketSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual void send(const std::string& message) = 0;
      virtual void sendArrayBuffer(const std::shared_ptr<ArrayBuffer>& buffer) = 0;
      virtual void connect() = 0;
      virtual void close(double code, const std::string& reason) = 0;
      virtual void ping() = 0;
      virtual void onOpen(const std::function<void(const std::string& /* selectedProtocol */)>& callback) = 0;
      virtual void onClose(const std::function<void(double /* code */, const std::string& /* reason */)>& callback) = 0;
      virtual void onError(const std::function<void(const std::string& /* error */)>& callback) = 0;
      virtual void onMessage(const std::function<void(const std::string& /* message */)>& callback) = 0;
      virtual void onArrayBuffer(const std::function<void(const std::shared_ptr<ArrayBuffer>& /* buffer */)>& callback) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "WebSocket";
  };

} // namespace margelo::nitro::websocket
