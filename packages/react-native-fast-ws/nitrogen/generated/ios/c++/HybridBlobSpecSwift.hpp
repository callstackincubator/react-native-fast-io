///
/// HybridBlobSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridBlobSpec.hpp"

// Forward declaration of `HybridBlobSpecCxx` to properly resolve imports.
namespace FastWebSocket { class HybridBlobSpecCxx; }

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }

#include <future>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "FastWebSocket-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::websocket {

  /**
   * The C++ part of HybridBlobSpecCxx.swift.
   *
   * HybridBlobSpecSwift (C++) accesses HybridBlobSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridBlobSpecCxx can directly inherit from the C++ class HybridBlobSpec
   * to simplify the whole structure and memory management.
   */
  class HybridBlobSpecSwift: public virtual HybridBlobSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridBlobSpecSwift(const FastWebSocket::HybridBlobSpecCxx& swiftPart):
      HybridObject(HybridBlobSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline FastWebSocket::HybridBlobSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::future<std::shared_ptr<ArrayBuffer>> arrayBuffer() override {
      auto __result = _swiftPart.arrayBuffer();
      return __result.getFuture();
    }

  private:
    FastWebSocket::HybridBlobSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::websocket
