///
/// HybridWebSocketSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridWebSocketSpec.hpp"

// Forward declaration of `HybridWebSocketSpecCxx` to properly resolve imports.
namespace FastWebSocket { class HybridWebSocketSpecCxx; }

// Forward declaration of `BinaryType` to properly resolve imports.
namespace margelo::nitro::websocket { enum class BinaryType; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }
// Forward declaration of `HybridBlobSpec` to properly resolve imports.
namespace margelo::nitro::websocket { class HybridBlobSpec; }

#include "BinaryType.hpp"
#include <string>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include <memory>
#include "HybridBlobSpec.hpp"
#include <functional>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "FastWebSocket-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::websocket {

  /**
   * The C++ part of HybridWebSocketSpecCxx.swift.
   *
   * HybridWebSocketSpecSwift (C++) accesses HybridWebSocketSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridWebSocketSpecCxx can directly inherit from the C++ class HybridWebSocketSpec
   * to simplify the whole structure and memory management.
   */
  class HybridWebSocketSpecSwift: public virtual HybridWebSocketSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridWebSocketSpecSwift(const FastWebSocket::HybridWebSocketSpecCxx& swiftPart):
      HybridObject(HybridWebSocketSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline FastWebSocket::HybridWebSocketSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline BinaryType getBinaryType() noexcept override {
      auto __result = _swiftPart.getBinaryType();
      return static_cast<BinaryType>(__result);
    }
    inline void setBinaryType(BinaryType binaryType) noexcept override {
      _swiftPart.setBinaryType(static_cast<int>(binaryType));
    }

  public:
    // Methods
    inline void send(const std::string& message) override {
      _swiftPart.send(message);
    }
    inline void sendArrayBuffer(const std::shared_ptr<ArrayBuffer>& buffer) override {
      _swiftPart.sendArrayBuffer(ArrayBufferHolder(buffer));
    }
    inline void sendBlob(const std::shared_ptr<margelo::nitro::websocket::HybridBlobSpec>& blob) override {
      _swiftPart.sendBlob(blob);
    }
    inline void connect() override {
      _swiftPart.connect();
    }
    inline void close(double code, const std::string& reason) override {
      _swiftPart.close(std::forward<decltype(code)>(code), reason);
    }
    inline void ping() override {
      _swiftPart.ping();
    }
    inline void onOpen(const std::function<void(const std::string& /* selectedProtocol */)>& callback) override {
      _swiftPart.onOpen(callback);
    }
    inline void onClose(const std::function<void(double /* code */, const std::string& /* reason */)>& callback) override {
      _swiftPart.onClose(callback);
    }
    inline void onError(const std::function<void(const std::string& /* error */)>& callback) override {
      _swiftPart.onError(callback);
    }
    inline void onMessage(const std::function<void(const std::string& /* message */)>& callback) override {
      _swiftPart.onMessage(callback);
    }
    inline void onArrayBuffer(const std::function<void(const std::shared_ptr<ArrayBuffer>& /* buffer */)>& callback) override {
      _swiftPart.onArrayBuffer(callback);
    }
    inline void onBlob(const std::function<void(const std::shared_ptr<margelo::nitro::websocket::HybridBlobSpec>& /* blob */)>& callback) override {
      _swiftPart.onBlob(callback);
    }

  private:
    FastWebSocket::HybridWebSocketSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::websocket
