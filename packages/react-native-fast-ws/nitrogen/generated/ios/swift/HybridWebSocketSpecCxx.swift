///
/// HybridWebSocketSpecCxx.swift
/// Fri Nov 01 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridWebSocketSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public final class HybridWebSocketSpecCxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::grabbou::bridge::swift`)
   * from `ReactNativeFastWS-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.grabbou.bridge.swift

  /**
   * Holds an instance of the `HybridWebSocketSpec` Swift protocol.
   */
  private(set) var implementation: HybridWebSocketSpec

  /**
   * Create a new `HybridWebSocketSpecCxx` that wraps the given `HybridWebSocketSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: HybridWebSocketSpec) {
    self.implementation = implementation
  }

  /**
   * Contains a (weak) reference to the C++ HybridObject to cache it.
   */
  public var hybridContext: margelo.nitro.HybridContext {
    get {
      return self.implementation.hybridContext
    }
    set {
      self.implementation.hybridContext = newValue
    }
  }

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  public var memorySize: Int {
    return self.implementation.memorySize
  }

  // Properties
  

  // Methods
  @inline(__always)
  public func send(message: std.string) -> Void {
    do {
      try self.implementation.send(message: String(message))
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func sendArrayBuffer(buffer: ArrayBufferHolder) -> Void {
    do {
      try self.implementation.sendArrayBuffer(buffer: buffer)
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func connect() -> Void {
    do {
      try self.implementation.connect()
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func close() -> Void {
    do {
      try self.implementation.close()
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func ping() -> Void {
    do {
      try self.implementation.ping()
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func onOpen(callback: bridge.Func_void_std__string) -> Void {
    do {
      try self.implementation.onOpen(callback: { () -> ((String) -> Void) in
        let shared = bridge.share_Func_void_std__string(callback)
        return { (selectedProtocol: String) -> Void in
          shared.pointee.call(std.string(selectedProtocol))
        }
      }())
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func onClose(callback: bridge.Func_void_WebSocketClosed) -> Void {
    do {
      try self.implementation.onClose(callback: { () -> ((WebSocketClosed) -> Void) in
        let shared = bridge.share_Func_void_WebSocketClosed(callback)
        return { (event: WebSocketClosed) -> Void in
          shared.pointee.call(event)
        }
      }())
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func onError(callback: bridge.Func_void_WebSocketError) -> Void {
    do {
      try self.implementation.onError(callback: { () -> ((WebSocketError) -> Void) in
        let shared = bridge.share_Func_void_WebSocketError(callback)
        return { (event: WebSocketError) -> Void in
          shared.pointee.call(event)
        }
      }())
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func onMessage(callback: bridge.Func_void_std__string) -> Void {
    do {
      try self.implementation.onMessage(callback: { () -> ((String) -> Void) in
        let shared = bridge.share_Func_void_std__string(callback)
        return { (message: String) -> Void in
          shared.pointee.call(std.string(message))
        }
      }())
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
  
  @inline(__always)
  public func onArrayBuffer(callback: bridge.Func_void_std__shared_ptr_ArrayBuffer_) -> Void {
    do {
      try self.implementation.onArrayBuffer(callback: { () -> ((ArrayBufferHolder) -> Void) in
        let shared = bridge.share_Func_void_std__shared_ptr_ArrayBuffer_(callback)
        return { (buffer: ArrayBufferHolder) -> Void in
          shared.pointee.call(buffer)
        }
      }())
      return 
    } catch {
      let message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(message))")
    }
  }
}
