///
/// HybridCompressorFactorySpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridCompressorFactorySpec.hpp"

// Forward declaration of `HybridCompressorFactorySpecCxx` to properly resolve imports.
namespace FastIO { class HybridCompressorFactorySpecCxx; }

// Forward declaration of `HybridCompressorSpec` to properly resolve imports.
namespace margelo::nitro::fastio { class HybridCompressorSpec; }
// Forward declaration of `CompressionAlgorithm` to properly resolve imports.
namespace margelo::nitro::fastio { enum class CompressionAlgorithm; }

#include <memory>
#include "HybridCompressorSpec.hpp"
#include "CompressionAlgorithm.hpp"

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "FastIO-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::fastio {

  /**
   * The C++ part of HybridCompressorFactorySpecCxx.swift.
   *
   * HybridCompressorFactorySpecSwift (C++) accesses HybridCompressorFactorySpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridCompressorFactorySpecCxx can directly inherit from the C++ class HybridCompressorFactorySpec
   * to simplify the whole structure and memory management.
   */
  class HybridCompressorFactorySpecSwift: public virtual HybridCompressorFactorySpec {
  public:
    // Constructor from a Swift instance
    explicit HybridCompressorFactorySpecSwift(const FastIO::HybridCompressorFactorySpecCxx& swiftPart):
      HybridObject(HybridCompressorFactorySpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline FastIO::HybridCompressorFactorySpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<margelo::nitro::fastio::HybridCompressorSpec> create(CompressionAlgorithm algorithm) override {
      auto __result = _swiftPart.create(static_cast<int>(algorithm));
      return __result;
    }

  private:
    FastIO::HybridCompressorFactorySpecCxx _swiftPart;
  };

} // namespace margelo::nitro::fastio
