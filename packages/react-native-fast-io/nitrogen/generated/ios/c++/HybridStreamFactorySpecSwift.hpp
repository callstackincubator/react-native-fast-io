///
/// HybridStreamFactorySpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridStreamFactorySpec.hpp"

// Forward declaration of `HybridStreamFactorySpec_cxx` to properly resolve imports.
namespace FastIO { class HybridStreamFactorySpec_cxx; }

// Forward declaration of `HybridInputStreamSpec` to properly resolve imports.
namespace margelo::nitro::fastio { class HybridInputStreamSpec; }

#include <memory>
#include "HybridInputStreamSpec.hpp"
#include <string>

#include "FastIO-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::fastio {

  /**
   * The C++ part of HybridStreamFactorySpec_cxx.swift.
   *
   * HybridStreamFactorySpecSwift (C++) accesses HybridStreamFactorySpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridStreamFactorySpec_cxx can directly inherit from the C++ class HybridStreamFactorySpec
   * to simplify the whole structure and memory management.
   */
  class HybridStreamFactorySpecSwift: public virtual HybridStreamFactorySpec {
  public:
    // Constructor from a Swift instance
    explicit HybridStreamFactorySpecSwift(const FastIO::HybridStreamFactorySpec_cxx& swiftPart):
      HybridObject(HybridStreamFactorySpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline FastIO::HybridStreamFactorySpec_cxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline double getBufferSize() noexcept override {
      return _swiftPart.getBufferSize();
    }

  public:
    // Methods
    inline std::shared_ptr<margelo::nitro::fastio::HybridInputStreamSpec> createInputStream(const std::string& path) override {
      auto __result = _swiftPart.createInputStream(path);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    FastIO::HybridStreamFactorySpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::fastio
