///
/// HybridFileSystemSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridFileSystemSpec.hpp"

// Forward declaration of `HybridFileSystemSpecCxx` to properly resolve imports.
namespace FastIO { class HybridFileSystemSpecCxx; }

// Forward declaration of `HybridInputStreamSpec` to properly resolve imports.
namespace margelo::nitro::fastio { class HybridInputStreamSpec; }
// Forward declaration of `Metadata` to properly resolve imports.
namespace margelo::nitro::fastio { struct Metadata; }
// Forward declaration of `WellKnownDirectory` to properly resolve imports.
namespace margelo::nitro::fastio { enum class WellKnownDirectory; }
// Forward declaration of `NativeFilePickerOptions` to properly resolve imports.
namespace margelo::nitro::fastio { struct NativeFilePickerOptions; }

#include <memory>
#include "HybridInputStreamSpec.hpp"
#include <string>
#include "Metadata.hpp"
#include "WellKnownDirectory.hpp"
#include <future>
#include <vector>
#include <NitroModules/PromiseHolder.hpp>
#include <optional>
#include "NativeFilePickerOptions.hpp"

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "FastIO-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::fastio {

  /**
   * The C++ part of HybridFileSystemSpecCxx.swift.
   *
   * HybridFileSystemSpecSwift (C++) accesses HybridFileSystemSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridFileSystemSpecCxx can directly inherit from the C++ class HybridFileSystemSpec
   * to simplify the whole structure and memory management.
   */
  class HybridFileSystemSpecSwift: public virtual HybridFileSystemSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridFileSystemSpecSwift(const FastIO::HybridFileSystemSpecCxx& swiftPart):
      HybridObject(HybridFileSystemSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline FastIO::HybridFileSystemSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<margelo::nitro::fastio::HybridInputStreamSpec> createInputStream(const std::string& path) override {
      auto __result = _swiftPart.createInputStream(path);
      return __result;
    }
    inline Metadata getMetadata(const std::string& path) override {
      auto __result = _swiftPart.getMetadata(path);
      return __result;
    }
    inline std::string getWellKnownDirectoryPath(WellKnownDirectory directory) override {
      auto __result = _swiftPart.getWellKnownDirectoryPath(static_cast<int>(directory));
      return __result;
    }
    inline std::future<std::vector<std::string>> showOpenFilePicker(const std::optional<NativeFilePickerOptions>& options) override {
      auto __result = _swiftPart.showOpenFilePicker(options);
      return __result.getFuture();
    }

  private:
    FastIO::HybridFileSystemSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::fastio
