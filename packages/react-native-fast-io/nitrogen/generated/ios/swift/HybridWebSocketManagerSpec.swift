///
/// HybridWebSocketManagerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridWebSocketManagerSpec``
public protocol HybridWebSocketManagerSpec_protocol: AnyObject {
  // Properties
  

  // Methods
  func create(url: String, protocols: [String]) throws -> (any HybridWebSocketSpec)
}

/// See ``HybridWebSocketManagerSpec``
public class HybridWebSocketManagerSpec_base: HybridObjectSpec {
  private weak var cxxWrapper: HybridWebSocketManagerSpec_cxx? = nil
  public func getCxxWrapper() -> HybridWebSocketManagerSpec_cxx {
  #if DEBUG
    guard self is HybridWebSocketManagerSpec else {
      fatalError("`self` is not a `HybridWebSocketManagerSpec`! Did you accidentally inherit from `HybridWebSocketManagerSpec_base` instead of `HybridWebSocketManagerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridWebSocketManagerSpec_cxx(self as! HybridWebSocketManagerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
  public var memorySize: Int { return 0 }
}

/**
 * A Swift base-protocol representing the WebSocketManager HybridObject.
 * Implement this protocol to create Swift-based instances of WebSocketManager.
 * ```swift
 * class HybridWebSocketManager : HybridWebSocketManagerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridWebSocketManagerSpec = HybridWebSocketManagerSpec_protocol & HybridWebSocketManagerSpec_base
