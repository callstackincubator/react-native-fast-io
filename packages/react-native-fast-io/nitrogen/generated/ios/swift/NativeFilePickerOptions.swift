///
/// NativeFilePickerOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NativeFilePickerOptions`, backed by a C++ struct.
 */
public typealias NativeFilePickerOptions = margelo.nitro.fastio.NativeFilePickerOptions

public extension NativeFilePickerOptions {
  private typealias bridge = margelo.nitro.fastio.bridge.swift

  /**
   * Create a new instance of `NativeFilePickerOptions`.
   */
  init(multiple: Bool?, startIn: String?, extensions: [String]?, mimeTypes: [String]?) {
    self.init({ () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = multiple {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = startIn {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__vector_std__string__ in
      if let __unwrappedValue = extensions {
        return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
          var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(std.string(__item))
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__vector_std__string__ in
      if let __unwrappedValue = mimeTypes {
        return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
          var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(std.string(__item))
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }())
  }

  var multiple: Bool? {
    @inline(__always)
    get {
      return self.__multiple.value
    }
    @inline(__always)
    set {
      self.__multiple = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var startIn: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__startIn.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__startIn = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var extensions: [String]? {
    @inline(__always)
    get {
      return { () -> [String]? in
        if let __unwrapped = self.__extensions.value {
          return __unwrapped.map({ __item in String(__item) })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__extensions = { () -> bridge.std__optional_std__vector_std__string__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
            var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(std.string(__item))
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
  
  var mimeTypes: [String]? {
    @inline(__always)
    get {
      return { () -> [String]? in
        if let __unwrapped = self.__mimeTypes.value {
          return __unwrapped.map({ __item in String(__item) })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__mimeTypes = { () -> bridge.std__optional_std__vector_std__string__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
            var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(std.string(__item))
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
}
