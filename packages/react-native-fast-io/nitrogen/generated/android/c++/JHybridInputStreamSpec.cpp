///
/// JHybridInputStreamSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridInputStreamSpec.hpp"

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>

namespace margelo::nitro::fastio {

  jni::local_ref<JHybridInputStreamSpec::jhybriddata> JHybridInputStreamSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridInputStreamSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridInputStreamSpec::initHybrid),
    });
  }

  size_t JHybridInputStreamSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  bool JHybridInputStreamSpec::hasBytesAvailable() {
    static const auto method = _javaPart->getClass()->getMethod<jboolean()>("hasBytesAvailable");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  double JHybridInputStreamSpec::read(const std::shared_ptr<ArrayBuffer>& buffer, double maxLength) {
    static const auto method = _javaPart->getClass()->getMethod<double(jni::alias_ref<JArrayBuffer::javaobject> /* buffer */, double /* maxLength */)>("read");
    auto __result = method(_javaPart, JArrayBuffer::wrap(buffer), maxLength);
    return __result;
  }
  void JHybridInputStreamSpec::open() {
    static const auto method = _javaPart->getClass()->getMethod<void()>("open");
    method(_javaPart);
  }
  void JHybridInputStreamSpec::close() {
    static const auto method = _javaPart->getClass()->getMethod<void()>("close");
    method(_javaPart);
  }

} // namespace margelo::nitro::fastio
