///
/// JHybridCompressorFactorySpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridCompressorFactorySpec.hpp"

// Forward declaration of `HybridCompressorSpec` to properly resolve imports.
namespace margelo::nitro::fastio { class HybridCompressorSpec; }
// Forward declaration of `CompressionAlgorithm` to properly resolve imports.
namespace margelo::nitro::fastio { enum class CompressionAlgorithm; }

#include <memory>
#include "HybridCompressorSpec.hpp"
#include "JHybridCompressorSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include "CompressionAlgorithm.hpp"
#include "JCompressionAlgorithm.hpp"

namespace margelo::nitro::fastio {

  jni::local_ref<JHybridCompressorFactorySpec::jhybriddata> JHybridCompressorFactorySpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridCompressorFactorySpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridCompressorFactorySpec::initHybrid),
    });
  }

  size_t JHybridCompressorFactorySpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<margelo::nitro::fastio::HybridCompressorSpec> JHybridCompressorFactorySpec::create(CompressionAlgorithm algorithm) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridCompressorSpec::javaobject>(jni::alias_ref<JCompressionAlgorithm> /* algorithm */)>("create");
    auto __result = method(_javaPart, JCompressionAlgorithm::fromCpp(algorithm));
    return JNISharedPtr::make_shared_from_jni<JHybridCompressorSpec>(jni::make_global(__result));
  }

} // namespace margelo::nitro::fastio
