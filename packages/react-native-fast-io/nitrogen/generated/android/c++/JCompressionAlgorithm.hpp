///
/// JCompressionAlgorithm.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "CompressionAlgorithm.hpp"

namespace margelo::nitro::fastio {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "CompressionAlgorithm" and the the Kotlin enum "CompressionAlgorithm".
   */
  struct JCompressionAlgorithm final: public jni::JavaClass<JCompressionAlgorithm> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/fastio/CompressionAlgorithm;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum CompressionAlgorithm.
     */
    [[maybe_unused]]
    CompressionAlgorithm toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<CompressionAlgorithm>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JCompressionAlgorithm> fromCpp(CompressionAlgorithm value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldGZIP = clazz->getStaticField<JCompressionAlgorithm>("GZIP");
      static const auto fieldDEFLATE = clazz->getStaticField<JCompressionAlgorithm>("DEFLATE");
      static const auto fieldDEFLATE_RAW = clazz->getStaticField<JCompressionAlgorithm>("DEFLATE_RAW");
      
      switch (value) {
        case CompressionAlgorithm::GZIP:
          return clazz->getStaticFieldValue(fieldGZIP);
        case CompressionAlgorithm::DEFLATE:
          return clazz->getStaticFieldValue(fieldDEFLATE);
        case CompressionAlgorithm::DEFLATE_RAW:
          return clazz->getStaticFieldValue(fieldDEFLATE_RAW);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::fastio
