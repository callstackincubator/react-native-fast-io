///
/// JHybridOutputStreamSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridOutputStreamSpec.hpp"

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <future>
#include <NitroModules/JPromise.hpp>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>

namespace margelo::nitro::fastio {

  jni::local_ref<JHybridOutputStreamSpec::jhybriddata> JHybridOutputStreamSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridOutputStreamSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridOutputStreamSpec::initHybrid),
    });
  }

  size_t JHybridOutputStreamSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::future<void> JHybridOutputStreamSpec::write(const std::shared_ptr<ArrayBuffer>& buffer) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* buffer */)>("write");
    auto __result = method(_javaPart, JArrayBuffer::wrap(buffer));
    return [&]() {
      auto __promise = std::make_shared<std::promise<void>>();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        __promise->set_value();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JString>& __message) {
        std::runtime_error __error(__message->toStdString());
        __promise->set_exception(std::make_exception_ptr(__error));
      });
      return __promise->get_future();
    }();
  }
  void JHybridOutputStreamSpec::open() {
    static const auto method = _javaPart->getClass()->getMethod<void()>("open");
    method(_javaPart);
  }
  void JHybridOutputStreamSpec::close() {
    static const auto method = _javaPart->getClass()->getMethod<void()>("close");
    method(_javaPart);
  }

} // namespace margelo::nitro::fastio
