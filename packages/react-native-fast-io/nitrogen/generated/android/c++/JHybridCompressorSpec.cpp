///
/// JHybridCompressorSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridCompressorSpec.hpp"

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>

namespace margelo::nitro::fastio {

  jni::local_ref<JHybridCompressorSpec::jhybriddata> JHybridCompressorSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridCompressorSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridCompressorSpec::initHybrid),
    });
  }

  size_t JHybridCompressorSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<ArrayBuffer> JHybridCompressorSpec::compress(const std::shared_ptr<ArrayBuffer>& chunk) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* chunk */)>("compress");
    auto __result = method(_javaPart, JArrayBuffer::wrap(chunk));
    return __result->cthis()->getArrayBuffer();
  }
  std::shared_ptr<ArrayBuffer> JHybridCompressorSpec::finalize() {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JArrayBuffer::javaobject>()>("finalize");
    auto __result = method(_javaPart);
    return __result->cthis()->getArrayBuffer();
  }

} // namespace margelo::nitro::fastio
